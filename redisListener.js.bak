// redisListener.js

const IMAGE_PROCESSING_CHANNEL = 'laravel_database_image_processing_queue';

function startRedisListener(redisClient, io) {
    // Redis 클라이언트가 이미 연결된 후 이 함수가 호출된다고 가정합니다.
    // 또는 여기서 연결 상태를 확인하고 구독할 수 있습니다.
    redisClient.subscribe(IMAGE_PROCESSING_CHANNEL, (err, count) => {
        if (err) {
            console.error('[STG] Redis 채널 구독 오류:', err);
            return;
        }
        console.log(`[STG] Redis 채널 '${IMAGE_PROCESSING_CHANNEL}' 구독 성공. 총 ${count}개 채널 구독 중.`);
    });

    redisClient.on('message', (channel, message) => {
        if (channel === IMAGE_PROCESSING_CHANNEL) {
            try {
                const payload = JSON.parse(message);
                const filePathFromQueue = payload.path;
                const userId = payload.user_id;

                // user_id나 path가 없는 경우 처리
                if (!userId || !filePathFromQueue) {
                    console.error('[STG] 메시지에서 userId 또는 path를 찾을 수 없습니다:', payload);
                    return;
                }

                console.log('[STG] 큐에서 받은 이미지 처리 메시지:', payload);
                console.log('[STG] 처리할 파일 경로:', filePathFromQueue);
                console.log('[STG] 업로드한 사용자 ID:', userId);
		
		const targetRoomName = 'user_' + String(userId); // <--- 수정된 부분: Room 이름 통일

                // 해당 userId의 Room으로 'image_uploaded' 이벤트를 Emit합니다.
                setTimeout(() => {
                    io.to(targetRoomName).emit('image_uploaded', { userId: userId, filePath: filePathFromQueue });
                    console.log(`[STG] 사용자 ${targetRoomName} 룸에 image_uploaded 이벤트 전송 완료`);
                }, 2000);

            } catch (error) {
                console.error('[STG] Redis 메시지 처리 중 오류 발생 (JSON 파싱 등):', error, '원본 메시지:', message);
            }
        }
        // --- 중요 ---
        // 여기에 다른 Redis 채널 (예: 채팅 관련)에 대한 리스너 로직을 추가할 수 있습니다.
        // else if (channel === 'chat_messages_channel') { /* 채팅 메시지 처리 */ }
    });

    console.log(`[STG] Redis 채널 '${IMAGE_PROCESSING_CHANNEL}'에 대한 리스너가 설정되었습니다.`);
}

module.exports = { startRedisListener };
